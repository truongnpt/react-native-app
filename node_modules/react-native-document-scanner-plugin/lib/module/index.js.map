{"version":3,"names":["NativeModules","Platform","LINKING_ERROR","select","ios","default","DocumentScanner","Proxy","get","Error","scanDocument","options","ResponseType","ScanDocumentResponseStatus"],"sources":["index.tsx"],"sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\nconst LINKING_ERROR =\n  `The package 'react-native-document-scanner-plugin' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\nconst DocumentScanner = NativeModules.DocumentScanner\n  ? NativeModules.DocumentScanner\n  : new Proxy(\n      {},\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      }\n    );\n\nexport default {\n  /**\n   * Opens the camera, and starts the document scan\n   */\n  scanDocument(\n    options: ScanDocumentOptions = {}\n  ): Promise<ScanDocumentResponse> {\n    return DocumentScanner.scanDocument(options);\n  },\n};\n\nexport interface ScanDocumentOptions {\n  /**\n   * The quality of the cropped image from 0 - 100. 100 is the best quality.\n   * @default: 100\n   */\n  croppedImageQuality?: number;\n\n  /**\n   * Android only: The maximum number of photos an user can take (not counting photo retakes)\n   * @default: undefined\n   */\n  maxNumDocuments?: number;\n\n  /**\n   * The response comes back in this format on success. It can be the document\n   * scan image file paths or base64 images.\n   * @default: ResponseType.ImageFilePath\n   */\n  responseType?: ResponseType;\n}\n\nexport enum ResponseType {\n  /**\n   * Use this response type if you want document scan returned as base64 images.\n   */\n  Base64 = 'base64',\n\n  /**\n   * Use this response type if you want document scan returned as inmage file paths.\n   */\n  ImageFilePath = 'imageFilePath',\n}\n\nexport interface ScanDocumentResponse {\n  /**\n   * This is an array with either file paths or base64 images for the\n   * document scan.\n   */\n  scannedImages?: string[];\n\n  /**\n   * The status lets you know if the document scan completes successfully,\n   * or if the user cancels before completing the document scan.\n   */\n  status?: ScanDocumentResponseStatus;\n}\n\nexport enum ScanDocumentResponseStatus {\n  /**\n   * The status comes back as success if the document scan completes\n   * successfully.\n   */\n  Success = 'success',\n\n  /**\n   * The status comes back as cancel if the user closes out of the camera\n   * before completing the document scan.\n   */\n  Cancel = 'cancel',\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,cAAc;AAEtD,MAAMC,aAAa,GAChB,+FAA8F,GAC/FD,QAAQ,CAACE,MAAM,CAAC;EAAEC,GAAG,EAAE,gCAAgC;EAAEC,OAAO,EAAE;AAAG,CAAC,CAAC,GACvE,sDAAsD,GACtD,6CAA6C;AAE/C,MAAMC,eAAe,GAAGN,aAAa,CAACM,eAAe,GACjDN,aAAa,CAACM,eAAe,GAC7B,IAAIC,KAAK,CACP,CAAC,CAAC,EACF;EACEC,GAAG,GAAG;IACJ,MAAM,IAAIC,KAAK,CAACP,aAAa,CAAC;EAChC;AACF,CAAC,CACF;AAEL,eAAe;EACb;AACF;AACA;EACEQ,YAAY,GAEqB;IAAA,IAD/BC,OAA4B,uEAAG,CAAC,CAAC;IAEjC,OAAOL,eAAe,CAACI,YAAY,CAACC,OAAO,CAAC;EAC9C;AACF,CAAC;AAuBD,WAAYC,YAAY;AAUvB,WAVWA,YAAY;EAAZA,YAAY;EAAZA,YAAY;AAAA,GAAZA,YAAY,KAAZA,YAAY;AA0BxB,WAAYC,0BAA0B;AAYrC,WAZWA,0BAA0B;EAA1BA,0BAA0B;EAA1BA,0BAA0B;AAAA,GAA1BA,0BAA0B,KAA1BA,0BAA0B"}